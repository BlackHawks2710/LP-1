Step 1: Create the CUSTOMERS and ORDERS Collections
Sample CUSTOMERS collection

db.CUSTOMERS.insertMany([
  { customer_id: 1, customer_name: "ABC", age: 28, mob_no: "1234567890", address: "Pune" },
  { customer_id: 2, customer_name: "XYZ", age: 35, mob_no: "9876543210", address: "Mumbai" },
  { customer_id: 3, customer_name: "DEF", age: 42, mob_no: "1122334455", address: "Delhi" }
]);

Sample ORDERS collection

db.ORDERS.insertMany([
  {
    order_id: 1,
    customer_id: 1,
    product_list: [{ product_name: "PenDrive", quantity: 2 }, { product_name: "Laptop", quantity: 1 }],
    order_date: ISODate("2022-03-15"),
    total_price: 30000
  },
  {
    order_id: 2,
    customer_id: 2,
    product_list: [{ product_name: "Mouse", quantity: 1 }, { product_name: "Keyboard", quantity: 1 }],
    order_date: ISODate("2022-05-10"),
    total_price: 1500
  },
  {
    order_id: 3,
    customer_id: 1,
    product_list: [{ product_name: "PenDrive", quantity: 1 }],
    order_date: ISODate("2023-01-10"),
    total_price: 700
  }
]);

Step 2: Implementing the Queries

1. Display all documents in the ORDERS collection

db.ORDERS.find();

2. List the customers in ascending order of their names

db.CUSTOMERS.find().sort({ customer_name: 1 });

3. Display all the orders placed before April 2022

db.ORDERS.find({ order_date: { $lt: ISODate("2022-04-01") } });

4. Display the name of customers who placed orders with a price greater than 25000

db.ORDERS.aggregate([
  { $match: { total_price: { $gt: 25000 } } },
  {
    $lookup: {
      from: "CUSTOMERS",
      localField: "customer_id",
      foreignField: "customer_id",
      as: "customer_details"
    }
  },
  { $unwind: "$customer_details" },
  { $project: { "customer_details.customer_name": 1, _id: 0 } }
]);

5. Display all orders that contain the product "PenDrive"

db.ORDERS.find({ "product_list.product_name": "PenDrive" });

6. Update the order_date of any order purchased by customer “ABC”

db.ORDERS.updateOne(
  { customer_id: 1 }, // Assuming customer "ABC" has `customer_id: 1`
  { $set: { order_date: ISODate("2023-10-10") } }
);

7. List all documents with orders that contain products with quantity less than 10

db.ORDERS.find({ "product_list.quantity": { $lt: 10 } });

8. Display the mobile number of the customer who has the highest buying total

db.ORDERS.aggregate([
  {
    $group: {
      _id: "$customer_id",
      total_spent: { $sum: "$total_price" }
    }
  },
  { $sort: { total_spent: -1 } },
  { $limit: 1 },
  {
    $lookup: {
      from: "CUSTOMERS",
      localField: "_id",
      foreignField: "customer_id",
      as: "customer_details"
    }
  },
  { $unwind: "$customer_details" },
  { $project: { "customer_details.mob_no": 1, _id: 0 } }
]);

Step 3: Index Operations

1. Create an index on customer_name in the CUSTOMERS collection

db.CUSTOMERS.createIndex({ customer_name: 1 });

2. Get the indexes in the CUSTOMERS collection

db.CUSTOMERS.getIndexes();

3. Drop the index on customer_name

db.CUSTOMERS.dropIndex("customer_name_1");

Step 4: MapReduce/Aggregation to Display Total Orders per Customer
Using an aggregation pipeline to count the total orders for each customer:

db.ORDERS.aggregate([
  {
    $group: {
      _id: "$customer_id",
      total_orders: { $sum: 1 }
    }
  },
  {
    $lookup: {
      from: "CUSTOMERS",
      localField: "_id",
      foreignField: "customer_id",
      as: "customer_details"
    }
  },
  { $unwind: "$customer_details" },
  {
    $project: {
      customer_name: "$customer_details.customer_name",
      total_orders: 1,
      _id: 0
    }
  }
]);